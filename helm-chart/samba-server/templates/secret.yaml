{{- if .Values.secrets.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: smbcreds
  labels:
    app: {{ .Release.Name }}
type: Opaque
data:
  username: {{- if and (eq .Values.secrets.username "") (eq .Values.secrets.password "") .Release.IsInstall }}
    {{ randAlphaNum 8 | b64enc | quote }}  # Generate random username only during install if both are empty
  {{- else }}
    {{- if .Values.secrets.username | ne "" }}
      {{ .Values.secrets.username | b64enc | quote }}  # Use provided username if not empty
    {{- else }}
      {{- $existingSecret := lookup "v1" "Secret" .Release.Namespace "smbcreds" }}
      {{- if $existingSecret }}
        {{ $existingSecret.data.username | quote }}  # Use existing username if available (from upgrade)
      {{- else }}
        {{ randAlphaNum 8 | b64enc | quote }}  # Fallback to generating a username if no secret found
      {{- end }}
    {{- end }}
  {{- end }}

  password: {{- if and (eq .Values.secrets.username "") (eq .Values.secrets.password "") .Release.IsInstall }}
    {{ randAlphaNum 16 | b64enc | quote }}  # Generate random password only during install if both are empty
  {{- else }}
    {{- if .Values.secrets.password | ne "" }}
      {{ .Values.secrets.password | b64enc | quote }}  # Use provided password if not empty
    {{- else }}
      {{- $existingSecret := lookup "v1" "Secret" .Release.Namespace "smbcreds" }}
      {{- if $existingSecret }}
        {{ $existingSecret.data.password | quote }}  # Use existing password if available (from upgrade)
      {{- else }}
        {{ randAlphaNum 16 | b64enc | quote }}  # Fallback to generating a password if no secret found
      {{- end }}
    {{- end }}
  {{- end }}

{{- end }}